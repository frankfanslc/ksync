// Code generated by _tools/gen_builtin.go; DO NOT EDIT.

package gojq

func init() {
	builtinFuncDefs = map[string][]*FuncDef{
		"IN": []*FuncDef{&FuncDef{Name: "IN", Args: []string{"s"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "any", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "s"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "IN", Args: []string{"src", "s"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "any", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "src"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "s"}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}},
		"INDEX": []*FuncDef{&FuncDef{Name: "INDEX", Args: []string{"stream", "idx_expr"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "stream"}}, Pattern: &Pattern{Name: "$row"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$row"}, &Comma{Func: "idx_expr"}, &Comma{Func: "tostring"}}}}}}}}}}, UpdateOp: OpAssign, Update: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$row"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "INDEX", Args: []string{"idx_expr"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "INDEX", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "idx_expr"}}}}}}}}}}}}}}}}}}}},
		"JOIN": []*FuncDef{&FuncDef{Name: "JOIN", Args: []string{"$idx", "idx_expr"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$idx"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "idx_expr"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "JOIN", Args: []string{"$idx", "stream", "idx_expr"}, Body: &Query{Commas: []*Comma{&Comma{Func: "stream"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$idx"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "idx_expr"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "JOIN", Args: []string{"$idx", "stream", "idx_expr", "join_expr"}, Body: &Query{Commas: []*Comma{&Comma{Func: "stream"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$idx"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "idx_expr"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "join_expr"}}}}},
		"all": []*FuncDef{&FuncDef{Name: "all", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "all", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "all", Args: []string{"y"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "all", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "y"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "all", Args: []string{"g", "y"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "isempty", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "g"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "y"}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"any": []*FuncDef{&FuncDef{Name: "any", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "any", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "any", Args: []string{"y"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "any", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "y"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "any", Args: []string{"g", "y"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "isempty", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "g"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "y"}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "not"}}}}},
		"arrays": []*FuncDef{&FuncDef{Name: "arrays", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"ascii_downcase": []*FuncDef{&FuncDef{Name: "ascii_downcase", Body: &Query{Commas: []*Comma{&Comma{Func: "explode"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "65"}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Number: "90"}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Number: "32"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "implode"}}}}},
		"ascii_upcase": []*FuncDef{&FuncDef{Name: "ascii_upcase", Body: &Query{Commas: []*Comma{&Comma{Func: "explode"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "97"}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Number: "122"}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: "32"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "implode"}}}}},
		"assign": []*FuncDef{&FuncDef{Name: "_assign", Args: []string{"ps", "$v"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "path", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "ps"}}}}}}, Pattern: &Pattern{Name: "$p"}, Start: &Query{Commas: []*Comma{&Comma{Func: "."}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$p"}}}, &Query{Commas: []*Comma{&Comma{Func: "$v"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"booleans": []*FuncDef{&FuncDef{Name: "booleans", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"boolean"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"capture": []*FuncDef{&FuncDef{Name: "capture", Args: []string{"$re"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "capture", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "null"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "capture", Args: []string{"$re", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "match", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "$flags"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".captures"}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".name"}}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".name"}}}}}}}}}}}}}}, Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".string"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "add"}}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{}}}}}}}}}}}}}}}}}},
		"combinations": []*FuncDef{&FuncDef{Name: "combinations", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$x"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}, IsSlice: true}}}}}}}}}}}}, &Comma{Func: "combinations"}}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$y"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$y"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "combinations", Args: []string{"n"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$dot"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "range", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "n"}}}}}}}}}}}}}}}}, &Comma{Func: "$dot"}}}}}}}}}}}}}}}, &Comma{Func: "combinations"}}}}}}}}}}}}},
		"del": []*FuncDef{&FuncDef{Name: "del", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "delpaths", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "path", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"endswith": []*FuncDef{&FuncDef{Name: "endswith", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "length"}}}}}}}}}}}}}}}}}}, IsSlice: true}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"endswith"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"endswith"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"finites": []*FuncDef{&FuncDef{Name: "finites", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "isfinite"}}}}}}}}}}}}}}}}}}}},
		"first": []*FuncDef{&FuncDef{Name: "first", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "first", Args: []string{"g"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Query{Commas: []*Comma{&Comma{Func: "g"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}}}}}}}}}}},
		"flatten": []*FuncDef{&FuncDef{Name: "_flatten", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$i"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "$i"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$i"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_flatten", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "$i"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "flatten", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "error", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"flatten depth must not be negative"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_flatten", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "flatten", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_flatten", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"from_entries": []*FuncDef{&FuncDef{Name: "from_entries", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".key"}}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".Key"}}}}}}}}}, AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".name"}}}}}}}}}, AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".Name"}}}}}}}}}}}}}}}}, Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "has", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"value"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".value"}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".Value"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "add"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, UpdateOp: OpUpdateAlt, Update: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{}}}}}}}}}}}}}}}}}},
		"fromdate": []*FuncDef{&FuncDef{Name: "fromdate", Body: &Query{Commas: []*Comma{&Comma{Func: "fromdateiso8601"}}}}},
		"fromdateiso8601": []*FuncDef{&FuncDef{Name: "fromdateiso8601", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "strptime", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"%Y-%m-%dT%H:%M:%SZ"`}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "mktime"}}}}},
		"fromstream": []*FuncDef{&FuncDef{Name: "fromstream", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Key: "x", Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}, ObjectKeyVal{Key: "e", Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{False: true}}}}}}}}}}}}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$init"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Foreach: &Foreach{Term: &Term{Func: &Func{Name: "f"}}, Pattern: &Pattern{Name: "$i"}, Start: &Query{Commas: []*Comma{&Comma{Func: "$init"}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".e"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "$init"}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "$i"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: "2"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"e"`}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"x"`}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$i"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"e"`}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Extract: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".e"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".x"}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"group_by": []*FuncDef{&FuncDef{Name: "group_by", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_group_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"gsub": []*FuncDef{&FuncDef{Name: "gsub", Args: []string{"$re", "str"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "sub", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "str"}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"g"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "gsub", Args: []string{"$re", "str", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "sub", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "str"}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$flags"}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Str: `"g"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"in": []*FuncDef{&FuncDef{Name: "in", Args: []string{"xs"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$x"}}, Body: &Query{Commas: []*Comma{&Comma{Func: "xs"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "has", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"index": []*FuncDef{&FuncDef{Name: "index", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "indices", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"indices": []*FuncDef{&FuncDef{Name: "indices", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "type"}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, IfElif{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "type"}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "explode"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "explode"}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"inputs": []*FuncDef{&FuncDef{Name: "inputs", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Try: &Try{Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "repeat", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "input"}}}}}}}}}}}}}}}}}}, Catch: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"break"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "error"}}}}}}}}}}}}}}}}}}}}},
		"inside": []*FuncDef{&FuncDef{Name: "inside", Args: []string{"xs"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$x"}}, Body: &Query{Commas: []*Comma{&Comma{Func: "xs"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "contains", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"isempty": []*FuncDef{&FuncDef{Name: "isempty", Args: []string{"g"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "first", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "g"}, &Comma{Func: "false"}}}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{True: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"iterables": []*FuncDef{&FuncDef{Name: "iterables", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "type"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"join": []*FuncDef{&FuncDef{Name: "join", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$i"}, Start: &Query{Commas: []*Comma{&Comma{Func: "null"}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$i"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"boolean"`}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"number"`}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "tostring"}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}}}}}}}}},
		"last": []*FuncDef{&FuncDef{Name: "last", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "last", Args: []string{"g"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "g"}}, Pattern: &Pattern{Name: "$item"}, Start: &Query{Commas: []*Comma{&Comma{Func: "null"}}}, Update: &Query{Commas: []*Comma{&Comma{Func: "$item"}}}}}}}}}}}}}}}}}}},
		"leaf_paths": []*FuncDef{&FuncDef{Name: "leaf_paths", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "paths", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "scalars"}}}}}}}}}}}}}}}}}}}},
		"limit": []*FuncDef{&FuncDef{Name: "limit", Args: []string{"$n", "g"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Foreach: &Foreach{Term: &Term{Func: &Func{Name: "g"}}, Pattern: &Pattern{Name: "$item"}, Start: &Query{Commas: []*Comma{&Comma{Func: "$n"}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}, Extract: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$item"}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "g"}}}}}}}}}}}}}}}}}}},
		"ltrimstr": []*FuncDef{&FuncDef{Name: "ltrimstr", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}}}}}}, AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "startswith", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "length"}}}, IsSlice: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"map": []*FuncDef{&FuncDef{Name: "map", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}, &Comma{Func: "f"}}}}}}}}}}}}}}}}}}},
		"map_values": []*FuncDef{&FuncDef{Name: "map_values", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}, UpdateOp: OpModify, Update: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}},
		"match": []*FuncDef{&FuncDef{Name: "match", Args: []string{"$re"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "match", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "null"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "match", Args: []string{"$re", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_match", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "$flags"}}}, &Query{Commas: []*Comma{&Comma{Func: "false"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}}},
		"max": []*FuncDef{&FuncDef{Name: "max", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "max_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}},
		"max_by": []*FuncDef{&FuncDef{Name: "max_by", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_max_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"min": []*FuncDef{&FuncDef{Name: "min", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "min_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}},
		"min_by": []*FuncDef{&FuncDef{Name: "min_by", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_min_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"modify": []*FuncDef{&FuncDef{Name: "_modify", Args: []string{"ps", "f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "path", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "ps"}}}}}}, Pattern: &Pattern{Name: "$p"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}}}}}}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$q"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$q"}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "getpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$q"}}}}}}}}}}}}}}}}, &Comma{Func: "f"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}, UpdateOp: OpUpdateAdd, Update: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "$p"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$x"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "delpaths", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"normals": []*FuncDef{&FuncDef{Name: "normals", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "isnormal"}}}}}}}}}}}}}}}}}}}},
		"not": []*FuncDef{&FuncDef{Name: "not", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "."}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "false"}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "true"}}}}}}}}}}}}}}}}}}},
		"nth": []*FuncDef{&FuncDef{Name: "nth", Args: []string{"$n"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$n"}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "nth", Args: []string{"$n", "g"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "error", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"nth doesn't support negative indices"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Foreach: &Foreach{Term: &Term{Func: &Func{Name: "g"}}, Pattern: &Pattern{Name: "$item"}, Start: &Query{Commas: []*Comma{&Comma{Func: "$n"}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}, Extract: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$item"}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"nulls": []*FuncDef{&FuncDef{Name: "nulls", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"numbers": []*FuncDef{&FuncDef{Name: "numbers", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"number"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"objects": []*FuncDef{&FuncDef{Name: "objects", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"paths": []*FuncDef{&FuncDef{Name: "paths", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "path", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "recurse", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "type"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "paths", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$x"}}, Body: &Query{Commas: []*Comma{&Comma{Func: "paths"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$p"}}, Body: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "getpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$p"}}}}}}}}}}}}}}}}, &Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"range": []*FuncDef{&FuncDef{Name: "range", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "range", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "range", Args: []string{"$start", "$end"}, Body: &Query{Commas: []*Comma{&Comma{Func: "$start"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "while", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$end"}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "range", Args: []string{"$start", "$end", "$step"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "$start"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "while", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$end"}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "$start"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "while", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$end"}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}},
		"recurse": []*FuncDef{&FuncDef{Name: "recurse", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "recurse", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}, &Suffix{Optional: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "recurse", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{FuncDefs: []*FuncDef{&FuncDef{Name: "r", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}, &Comma{Func: "r"}}}}}}}}}}}}}}}}}}, Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}, &FuncDef{Name: "recurse", Args: []string{"f", "cond"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{FuncDefs: []*FuncDef{&FuncDef{Name: "r", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "cond"}}}}}}}}}}}}}}}}, &Comma{Func: "r"}}}}}}}}}}}}}}}}}}, Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}},
		"repeat": []*FuncDef{&FuncDef{Name: "repeat", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{FuncDefs: []*FuncDef{&FuncDef{Name: "_repeat", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_repeat"}}}}}}}}}}}}}}}}, Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_repeat"}}}}}}}}}}}}}}}},
		"rindex": []*FuncDef{&FuncDef{Name: "rindex", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "indices", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Number: "1"}}}}}}}}}}}}}}}, IsSlice: true}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"rtrimstr": []*FuncDef{&FuncDef{Name: "rtrimstr", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}}}}}}, AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "endswith", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$x"}}}}}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{End: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "length"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"scalars": []*FuncDef{&FuncDef{Name: "scalars", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "type"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"scan": []*FuncDef{&FuncDef{Name: "scan", Args: []string{"$re"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "scan", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "null"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "scan", Args: []string{"$re", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "match", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"g"`}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$flags"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".captures"}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".captures"}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".string"}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".string"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"select": []*FuncDef{&FuncDef{Name: "select", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "f"}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "."}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}},
		"sort": []*FuncDef{&FuncDef{Name: "sort", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "sort_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}},
		"sort_by": []*FuncDef{&FuncDef{Name: "sort_by", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_sort_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"splits": []*FuncDef{&FuncDef{Name: "splits", Args: []string{"$re"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "splits", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "null"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "splits", Args: []string{"$re", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "split", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "$flags"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}}}},
		"startswith": []*FuncDef{&FuncDef{Name: "startswith", Args: []string{"$x"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{End: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Func: "length"}}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "$x"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"startswith"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"startswith"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"strings": []*FuncDef{&FuncDef{Name: "strings", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"sub": []*FuncDef{&FuncDef{Name: "sub", Args: []string{"$re", "str"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "sub", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "str"}}}, &Query{Commas: []*Comma{&Comma{Func: "null"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "sub", Args: []string{"$re", "str", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$in"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "match", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "$flags"}}}}}}, Pattern: &Pattern{Name: "$r"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$x"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "$r"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".captures"}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".name"}}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".name"}}}}}}}}}}}}}}, Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Name: ".string"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "add"}}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$in"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, IsSlice: true, End: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$r"}, SuffixList: []*Suffix{&Suffix{Index: &Index{Name: ".offset"}}}}}}}}}}}}}}}}}}}}}}, ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "str"}}}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$r"}, SuffixList: []*Suffix{&Suffix{Index: &Index{Name: ".offset"}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$r"}, SuffixList: []*Suffix{&Suffix{Index: &Index{Name: ".length"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$in"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "1"}}}}}}}}}}}}}}}}}}}}}}}}}}}, IsSlice: true}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"test": []*FuncDef{&FuncDef{Name: "test", Args: []string{"$re"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "test", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "null"}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "test", Args: []string{"$re", "$flags"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_match", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$re"}}}, &Query{Commas: []*Comma{&Comma{Func: "$flags"}}}, &Query{Commas: []*Comma{&Comma{Func: "true"}}}}}}}}}}}}}}}}}}}},
		"to_entries": []*FuncDef{&FuncDef{Name: "to_entries", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "keys"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$k"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Key: "key", Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$k"}}}}}}}}}}}}, ObjectKeyVal{Key: "value", Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Func: "$k"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"todate": []*FuncDef{&FuncDef{Name: "todate", Body: &Query{Commas: []*Comma{&Comma{Func: "todateiso8601"}}}}},
		"todateiso8601": []*FuncDef{&FuncDef{Name: "todateiso8601", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "strftime", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"%Y-%m-%dT%H:%M:%SZ"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"tostream": []*FuncDef{&FuncDef{Name: "tostream", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "path", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{FuncDefs: []*FuncDef{&FuncDef{Name: "r", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}, &Suffix{Optional: true}}}}}}}}}}}}}, &Comma{Func: "r"}}}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}, Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$p"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "getpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "$p"}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "path", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}, &Suffix{Optional: true}}}}}}}}}}}}}}}}}}, Pattern: &Pattern{Name: "$q"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$q"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"transpose": []*FuncDef{&FuncDef{Name: "transpose", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$in"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "length"}}}}}}}}}}}}}}}}, &Comma{Func: "max"}}}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$max"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$length"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "range", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "$max"}}}}}}, Pattern: &Pattern{Name: "$j"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "range", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Func: "$length"}}}}}}, Pattern: &Pattern{Name: "$i"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$in"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "$i"}}}}}, &Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "$j"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"truncate_stream": []*FuncDef{&FuncDef{Name: "truncate_stream", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$n"}}, Body: &Query{Commas: []*Comma{&Comma{Func: "null"}, &Comma{Func: "f"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$input"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "length"}}}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$input"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: "0"}}}}}}}}}}}}}}}, &Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "$n"}}}, IsSlice: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"unique": []*FuncDef{&FuncDef{Name: "unique", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "unique_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "."}}}}}}}}}}}}}}}}}}}},
		"unique_by": []*FuncDef{&FuncDef{Name: "unique_by", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_unique_by", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Query: &Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"until": []*FuncDef{&FuncDef{Name: "until", Args: []string{"cond", "next"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{FuncDefs: []*FuncDef{&FuncDef{Name: "_until", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "cond"}}}, Then: &Query{Commas: []*Comma{&Comma{Func: "."}}}, Else: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "next"}, &Comma{Func: "_until"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_until"}}}}}}}}}}}}}}}},
		"values": []*FuncDef{&FuncDef{Name: "values", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"walk": []*FuncDef{&FuncDef{Name: "walk", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &Bind{Patterns: []*Pattern{&Pattern{Name: "$in"}}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "keys"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$key"}, Start: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{}}}}}}}}}}}}}}, Update: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Query: &Query{Commas: []*Comma{&Comma{Func: "$key"}}}, Val: &ObjectVal{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$in"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Query{Commas: []*Comma{&Comma{Func: "$key"}}}}}}}}}}}}}}}}}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "walk", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "f"}}}, Elif: []IfElif{IfElif{Cond: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "walk", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Func: "f"}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"while": []*FuncDef{&FuncDef{Name: "while", Args: []string{"cond", "update"}, Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{FuncDefs: []*FuncDef{&FuncDef{Name: "_while", Body: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{If: &If{Cond: &Query{Commas: []*Comma{&Comma{Func: "cond"}}}, Then: &Query{Commas: []*Comma{&Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}, &Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Query: &Query{Commas: []*Comma{&Comma{Func: "update"}, &Comma{Func: "_while"}}}}}}}}}}}}}}}}, Else: &Query{Commas: []*Comma{&Comma{Func: "empty"}}}}}}}}}}}}}}}}}}}, Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_while"}}}}}}}}}}}}}}}},
		"with_entries": []*FuncDef{&FuncDef{Name: "with_entries", Args: []string{"f"}, Body: &Query{Commas: []*Comma{&Comma{Func: "to_entries"}, &Comma{Filters: []*Filter{&Filter{Alt: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Query{&Query{Commas: []*Comma{&Comma{Func: "f"}}}}}}}}}}}}}}}}, &Comma{Func: "from_entries"}}}}},
	}
}
